{"name":"PureÎ»i","tagline":"A purely functional, dynamically typed, parallel evaluated, lisp-like programming language","body":"\r\nDownload\r\n--------\r\n\r\n- Windows (Soon)\r\n- Linux (Soon)\r\n- [OS X](https://github.com/soupi/pureli/raw/master/downloads/OS_X/pureli)\r\n\r\nInstallation\r\n------------\r\n\r\nFrom source:\r\n\r\nInstall GHC 7.8.* and cabal and run the following commands:\r\n\r\n```sh\r\ngit clone https://github.com/soupi/pureli\r\ncd pureli\r\ncabal sandbox init\r\ncabal install\r\n```\r\n\r\nHOWTO\r\n-----\r\n\r\nRead [manual/HOWTO.md](https://github.com/soupi/pureli/blob/master/manual/HOWTO.md) for information on how to run Pureli programs and REPL.\r\n\r\nRead [manual/MANUAL.md](https://github.com/soupi/pureli/blob/master/manual/MANUAL.md) for information about pureli and how to write pureli programs.\r\n\r\n\r\nExamples\r\n--------\r\n\r\n### Hello World\r\n\r\n```rkt\r\n(module main)\r\n\r\n(define main\r\n  (print! \"Hello World!\"))\r\n\r\n```\r\n\r\n\r\n### Echo\r\n\r\n```rkt\r\n;The program will repeat anything the user writes until ^C\r\n(module main)\r\n\r\n(module \"stdlib/std.pli\" std (bind!))\r\n\r\n(define main\r\n  (do!\r\n    [print! \"echo program\"]\r\n    [letrec ([go!\r\n      (lambda ()\r\n        (do!\r\n          [bind! (read!) print!]\r\n          [go!]))])\r\n      (go!)]))\r\n```\r\n\r\n### Exponent\r\n\r\n```rkt\r\n(module main)\r\n\r\n(require \"stdlib/std.pli\" list)\r\n(require \"stdlib/std.pli\" std)\r\n\r\n\r\n(define main\r\n  (do!\r\n    (print! \"calculating 2^10000 + 2^10001 + ... + 2^10030\")\r\n    (let! result (pure calculation))\r\n    (print! result)))\r\n\r\n\r\n(define calculation\r\n  (list/reduce +\r\n    (list/map\r\n      (std/curry exponent 2)\r\n      (list/map +\r\n                (list/replicate 30 10000)\r\n                (list/range 1 30)))))\r\n\r\n\r\n(define exponent (n expn)\r\n  (if (<= expn 0)\r\n      1\r\n      (* n (exponent n (- expn 1)))))\r\n```\r\n\r\n### Unevaluated parameters\r\n\r\n```rkt\r\n\r\n(module main)\r\n\r\n(define first-element (~x)\r\n  (eval (car 'x)))\r\n\r\n(first-element (:hello (error \"will not be thrown\")))\r\n\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}