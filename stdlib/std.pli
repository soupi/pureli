;;;;;;;;;;;;;;;;;;;;;;;;
;;                    ;;
;;  Standard Library  ;;
;;                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;

(module std)

(define id (x) x)

(define trace-id (x) (trace x x))

(define trace-msg-id (msg x) (trace (++ msg " " (show x)) x))

(define reverseList (xs)
    (if (empty? xs)
        xs
        (++ (reverseList (cdr xs)) (list (car xs)))))


(define flip (f &params)
  (cond
    ((empty? params)
     (lambda (&p) (applyn flip (++ (list f) p))))
    ((empty? (cdr params))
     (lambda (&p) (apply f (reverseList (++ params p)))))
    (#t
     (apply f (reverseList params)))))

(define compose (f g)
  (lambda (&xs) (f (apply g xs))))

(define cond ~params
  (letrec ((cond-helper
            (lambda (params)
              (if (empty? params)
                  (error "*** error: cond - non-exhuastive patterns")
                  (if (eval (car (car params)))
                      (eval (car (cdr (car params))))
                      (cond-helper (cdr params)))))))
  (cond-helper 'params)))

(define apply (f xs)
  (eval (++ (list f) xs)))

(define applyn (~f xs)
  (eval (++ 'f xs)))

(define curry (f &params)
  (lambda xs
          (apply f (++ params xs))))


;;;;;;;;;;
;;  IO  ;;
;;;;;;;;;;


(module io)


(define bind! (m f)
    (do!
      [let! x m]
      [f x]))

(define sequence! (xs)
  (if (empty? xs)
      (pure (list))
      (do!
        (let! y (car xs))
        (let! ys (sequence! (cdr xs)))
        (pure (++ (list y) ys)))))



;;;;;;;;;;
;; List ;;
;;;;;;;;;;

(module list)

(require std)
(require bool)

(define elem [x xs]
  (if (list? xs)
    (if (empty? xs) #f
      (if (= (car xs) x) #t
        (elem x (cdr xs))))
    (error "not a list")))

(define cons [x xs]
  (if (list? xs)
      (++ (list x) xs)
      (++ (list x) (list xs))))

(define fmap [f xs]
  (if (bool/not (list? xs))
    (error "cannot map on a non list type")
    (if
      (empty? xs)
      xs
      (cons (f (car xs)) (fmap f (cdr xs))))))

(define map [f &xs]
  (std/cond
    ((empty? xs)
     (lambda params
       (std/applyn (map f) params)))
    ((std/apply bool/or (fmap empty? xs))
     (list))
    (#t
     (cons (std/apply f (fmap car xs)) (std/applyn (map f) (fmap cdr xs))))))


(define reduce [f &xs]
  (std/cond
    [(= 0 (length xs))
     (lambda (ys) (reduce f ys))]
    [(> 1 (length xs))
     (error (++ "arity problem. reduce expects 2 arguments, got: " (show (length xs))))]
    [#t
     (let ([ls (car xs)])
       (std/cond
         [(bool/not (list? ls))
          (error (words->str (list "cannot reduce a non list type:" (show ls))))]
         [(empty? ls) (f)]
         [#t
          (std/apply f ls)]))]))




(define range (low high)
  (if (>= low high)
      low
      (cons low
                 (range (+ low 1) high))))

(define take (lst i)
   (if (> i 0)
       (slice 0 i lst)
       ()))

(define drop (lst i)
    (if (> i 0)
        (drop (cdr lst) (- i 1))
        lst))

(define part (lst i)
   (list (take lst i)
         (drop lst i)))

(define mergelists (left right)
   (std/cond
      ((empty? left) right)
      ((empty? right) left)
      ((< (car left) (car right))
       (cons (car left) (mergelists (cdr left) right)))
      (#t
       (cons (car right) (mergelists left (cdr right))))))

(define mergesort (lst)
   (if (> 2 (length lst))
       lst
       (let ([x (/ (length lst) 2)])
            (mergelists (mergesort (take lst x))
                        (mergesort (drop lst x))))))



(define filter [f xs]
    (if (bool/not (list? xs))
        (error "cannot filter on a non list type")
        (if (empty? xs)
            xs
            (if (f (car xs)) (cons (car xs) (filter f (cdr xs))) (filter f (cdr xs))))))

(define fold [f xs init]
    (if (bool/not (list? xs))
        (error "cannot fold on a non list type")
        (if (empty? xs)
            init
            (f (car xs) (fold f (cdr xs) init)))))

(define index
     (lambda (lst place)
             (if (nil? lst)
                 ()
                 (if (> place (length lst))
                     (error "place is out of bound for list given")
                     (if (< place 0)
                         (error "place cannot be smaller than 0 for list given")
                         (if (= place 0)
                             (car lst)
                             (index (cdr lst) (- place 1))))))))

(define reverse (xs)
    (if (empty? xs)
        xs
        (++ (reverse (cdr xs)) (list(car xs)))))

(define flatten l
   (cond
     ((nil? l) ())
     ((empty? (cdr l)) (++ (flatten (take l 1)) (flatten (drop l 1))))
     (#t (list l))))


(define replicate (times x)
  (if (<= times 0)
      (list)
      (cons x (replicate (- times 1) x))))


;;;;;;;;;;;;;;;;
;; Dictionary ;;
;;;;;;;;;;;;;;;;

(module dict)

(require std)
(require list)
(require bool)


(define dict->list (dict)
  dict)

(define dict? [xs]
  (bool/and
    (list? xs)
    (std/apply bool/and (list/map list? xs))
    (std/apply bool/and (list/map (lambda (x) (= 2 (length x))) xs))))


(define lookup (thing alist)
     (if (empty? alist)
         (list)
         (if (= (car (car alist)) thing)
             (cdr (car alist))
             (lookup thing (cdr alist)))))


(define insert (thing alist)
    (if (empty? alist)
        (list thing)
        (list/cons thing (remove (car thing) alist))))


(define remove (thing alist)
    (if (empty? alist)
        alist
        (if (= (car (car alist)) thing)
            (cdr alist)
            (list/cons (car alist) (remove thing (cdr alist))))))


(define list->dict alist
    (if (empty? (car alist))
        alist
        (std/cond ((nil? (car (car (car alist)))) (error "Not a Dictionary"))
                  ((nil? (cdr (car alist))) (error "Not a Dictionary"))
                  ((empty? (cdr alist)) (car (list/cons (car alist) (list->dict (cdr alist))))))))


(define map [f &xs]
  (std/cond
    [(= 0 (length xs))
     (lambda (ys) (map f ys))]
    [(> 1 (length xs))
     (error (++ "arity problem. map expects 2 arguments, got: " (show (length xs))))]
    [#t
     (let ([dict (car xs)])
       (std/cond
         [(bool/not (dict? dict))
          (error (words->str (list "cannot map a non dictionary type:" (show dict))))]
         [(empty? dict) (list)]
         [#t
          (list/cons (list (car (car dict)) (f (car (cdr (car dict))))) (map f (cdr dict)))]))]))

(define reduce [f &xs]
  (std/cond
    [(= 0 (length xs))
     (lambda (ys) (reduce f ys))]
    [(> 1 (length xs))
     (error (++ "arity problem. reduce expects 2 arguments, got: " (show (length xs))))]
    [#t
     (let ([dict (car xs)])
       (std/cond
         [(bool/not (dict? dict))
          (error (words->str "cannot reduce a non dictionary type:" (show dict)))]
         [(empty? dict) (f)]
         [#t
          (std/apply f (list/map (std/compose car cdr) dict))]))]))




;;;;;;;;;;;;;
;; Numbers ;;
;;;;;;;;;;;;;

(module numbers)

(require std)

(define max lst
   (std/cond
     ((empty? (cdr lst)) (car lst))
     ((>= (car lst) (std/apply max (cdr lst))) (car lst))
     (#t  (std/apply max (cdr lst)))))

(define min lst
   (std/cond
     ((empty? (cdr lst)) (car lst))
     ((<= (car lst) (std/apply min (cdr lst))) (car lst))
     (#t  (std/apply min (cdr lst)))))

(define abs (x)
   (if (< x 0) (* x -1) x))

(define gcd (a b)
   (std/cond ((= b 0) a)
             (#t (gcd b (mod a b)))))

(define lcm (a b)
   (/ (* (abs a) (abs b))
      (gcd a b)))



;;;;;;;;;;;;;
;; Boolean ;;
;;;;;;;;;;;;;

(module bool (not and or))

(require std)

(define not [test]
  (if test #f #t))

(define and ~params
  (and-helper 'params))

(define and-helper (params)
  (if (empty? params)
      #t
      (if (eval (car params))
          (and-helper (cdr params))
          #f)))

(define or ~params
  (or-helper 'params))

(define or-helper (params)
  (if (empty? params)
      #f
      (if (car params)
          #t
          (or-helper (cdr params)))))


;;;;;;;;;;
;; Test ;;
;;;;;;;;;;

(module testing (assert assert!))

(require std)
(require io)
(require bool)
(require list)

(define assert ~params
  (assert-helper 'params))

(define assert-helper (params)
  (std/cond
    ((empty? params) (list "Tests OK"))

    ((<> 2 (length (car params))) (error "invalid structure"))

    ((bool/not (eval (car (car params))))
     (list "Test Failed: " (eval (car (cdr (car params)))) "\n"))

    (#t (assert-helper (cdr params)))))

(define assert! ~params
  (do!
    (io/sequence!
      (list/map print! (++ (assert-helper 'params) (list "\n"))))
    (pure nil)))


;;;;;;;;;;;
;; Tests ;;
;;;;;;;;;;;

(module test)

(require std)
(require io)
(require list)
(require bool)
(require dict)
(require numbers)

(define main
  (do!
    [test-elem!]
    [test-cons!]
    [test-map!]
    [test-bind!]
    [println! "----------"]
     moti-tests))

(define test-elem! ()
  (do!
    [println! "list/elem test. expected results: #t"]
    [println! (list/elem 3 (list 1 2 3))]
    [println! (try (list/elem 3 3) #t)]
    [println! (bool/not (list/elem 4 (list 1 2 3)))]))

(define test-cons! ()
  (do!
    [println! "list/cons test. expected results: (1 2)"]
    [println! (list/cons 1 2)]
    [println! (list/cons 1 (list 2))]
    [println! (list/cons 1 (cdr (list/cons 1 2)))]))

(define test-map! ()
  (do!
    [println! "test list/map"]
    [println! (list/map std/id (list))]
    [println! (list/map std/id (list 1 2 3))]
    [println! (list/map show (list))]
    [println! (list/map show (list 1 2 3))]
    [println! (list/map (lambda (x) (+ 0.0 x)) (list 1 2 3))]
    [println! (list/map (lambda (x) (+ 1 x)) (list 1 2 3))]
    [println! (list/map + (list 1 2 3) (list 3 2 1))]
    [println! (list/map list/cons (list 1 2 3) (list 3 2 1))]))

(define test-fmap! ()
  (do!
    [println! "test list/fmap"]
    [println! (list/fmap std/id (list))]
    [println! (list/fmap std/id (list 1 2 3))]
    [println! (list/fmap show (list))]
    [println! (list/fmap show (list 1 2 3))]
    [println! (list/fmap std/id (list 1 2 3))]
    [println! (list/fmap (lambda (x) (+ 0.0 x)) (list 1 2 3))]
    [println! (list/fmap (lambda (x) (+ 1 x)) (list 1 2 3))]))



(define test-bind! ()
  (do!
    [println! "test bind. expected result: #t"]
    [io/bind! (pure #t) println!]))


;;;


(define moti-tests
  (do!
    [println! (dict/list->dict (list (list "a" 5) (list "b" 6)))]
    [println! (dict/list->dict (list (list "a" 5) (list "b" 6) (list "d" 6) (list "e" 6) (list "f" 6) (list "g" 6)))]
    [println! (dict/list->dict (list (list "a" 5) (list 6) (list "d" 6) (list "e" 6) (list "f" 6) (list "g" 6)))]
    [println! (dict/list->dict (list (list 5) (list "b" 6) (list "d" 6) (list "e" 6) (list "f" 6) (list "g" 6)))]
    [let! x (pure (list (list "a" 5) (list "b" 6)))]
    [println! x]
    [println! (dict/lookup "c" x)]
    [let! y (pure (dict/insert (list "c" 7) x))]
    [let! z (pure (dict/insert (list "c" 8) x))]
    [println! y]
    [println! z]
    [println! (dict/lookup "c" y)]
    [println! (dict/remove "c" y)]
    [println! (list/reverse (list 1 2 3 4 5))]
    [println! (list/index (list 1 2 3 4) 1)]
    [println! (list/filter integer? (list 1 2 3 1.3))]
    [println! (list/fold + (list 1 2 3 4) 0)]
    [println! (numbers/max 1 2 3 -1)]
    [println! (numbers/gcd 1024 516)]
    [println! (numbers/lcm 12 18)]
    [let! result (pure (numbers/min 1 2 5 -1))]
    [println! "Merge List Result:"]
    [println! result]))

