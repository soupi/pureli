;; standard library

(module std)

(define id (x) x)

(define trace-id (x) (trace x x))

(define trace-msg-id (msg x) (trace (++ msg " " (show x)) x))

(define compose (f g)
  (lambda (x) (f (g x))))

(define bind! (m f)
    (do!
      [let! x m]
      [f x]))

(define cond ~params
  (letrec ((cond-helper
            (lambda (params)
              (if (empty? params)
                  (error "*** error: cond - non-exhuastive patterns")
                  (if (eval (car (car params)))
                      (eval (car (cdr (car params))))
                      (cond-helper (cdr params)))))))
  (cond-helper 'params)))

(define apply (f xs)
  (eval (++ (list f) xs)))

(define applyn (~f xs)
  (eval (++ 'f xs)))

;; ----------
;; list functions
(module list)

(require std)
(require bool)

(define elem [x xs]
  (if (list? xs)
    (if (empty? xs) #f
      (if (= (car xs) x) #t
        (elem x (cdr xs))))
    (error "not a list")))

(define cons [x xs]
  (if (list? xs)
      (++ (list x) xs)
      (++ (list x) (list xs))))

(define fmap [f xs]
  (if (bool/not (list? xs))
    (error "cannot map on a non list type")
    (if
      (empty? xs)
      xs
      (cons (f (car xs)) (fmap f (cdr xs))))))

(define map [f &xs]
  (std/cond
    ((empty? xs)
     (lambda params
       (std/applyn (map f) params)))
    ((std/apply bool/or (fmap empty? xs))
     (list))
    (#t
     (cons (std/apply f (fmap car xs)) (std/applyn (map f) (fmap cdr xs))))))

;; ----------
;; bool functions
(module bool)

(require std)

(define not [test]
  (if test #f #t))

(define and params
  (if (empty? params)
      #t
      (if (car params)
          (std/apply and (cdr params))
          #f)))

(define or params
  (if (empty? params)
      #f
      (if (car params)
          #t
          (std/apply or (cdr params)))))



;; ----------
;; tests
(module main)

(require std)
(require list)
(require bool)

(define main
  (do!
    [test-elem!]
    [test-cons!]
    [test-map!]
    [test-bind!]))

(define test-elem! ()
  (do!
    [print! "list/elem test. expected results: #t"]
    [print! (list/elem 3 (list 1 2 3))]
    [print! (try (list/elem 3 3) #t)]
    [print! (bool/not (list/elem 4 (list 1 2 3)))]))

(define test-cons! ()
  (do!
    [print! "list/cons test. expected results: (1 2)"]
    [print! (list/cons 1 2)]
    [print! (list/cons 1 (list 2))]
    [print! (list/cons 1 (cdr (list/cons 1 2)))]))

(define test-map! ()
  (do!
    [print! "test list/map"]
    [print! (list/map std/id (list))]
    [print! (list/map std/id (list 1 2 3))]
    [print! (list/map show (list))]
    [print! (list/map show (list 1 2 3))]
    [print! (list/map (lambda (x) (+ 0.0 x)) (list 1 2 3))]
    [print! (list/map (lambda (x) (+ 1 x)) (list 1 2 3))]))

(define test-fmap! ()
  (do!
    [print! "test list/fmap"]
    [print! (list/fmap std/id (list))]
    [print! (list/fmap std/id (list 1 2 3))]
    [print! (list/fmap show (list))]
    [print! (list/fmap show (list 1 2 3))]
    [print! (list/fmap std/id (list 1 2 3))]
    [print! (list/fmap (lambda (x) (+ 0.0 x)) (list 1 2 3))]
    [print! (list/fmap (lambda (x) (+ 1 x)) (list 1 2 3))]))



(define test-bind! ()
  (do!
    [print! "test bind. expected result: #t"]
    [std/bind! (pure #t) print!]))
