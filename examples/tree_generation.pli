;; tree generation
;; https://www.reddit.com/r/dailyprogrammer/comments/1t0r09/121613_challenge_145_easy_tree_generation/

;; entry module
(module main)

;; requires
(require "stdlib/std.pli" io (bind!))
(require logic)

;; entry point
(define main
  (do!
    (println! welcome-msg)
    (let! input (io/bind! (read!) (lambda (input) (pure (logic/evaluate-input input)))))
    (println! "")
    (let ([size (car input)] [trunk (car (cdr input))] [leaf (car (cdr (cdr input)))])
         (println! (logic/calculate-tree size trunk leaf)))))

(define welcome-msg
  (lines->str
    (list
      "Tree generation software."
      "usage: <number> <trunk-character> <leaf-character>"
      "the <number> should be at between 3 and 79 and must be odd")))

;; logic module
(module logic (evaluate-input calculate-tree))

;; requires
(require "stdlib/std.pli" std)
(require "stdlib/std.pli" list)
(require "stdlib/std.pli" bool)

;; disqualification
(define apply std/apply)
(define cons list/cons)
(define and  bool/and)
(define replicate list/replicate)

;; creates data from the input
(define evaluate-input (input)
  (let ((input-list (str->words input)))
    (if (<> 3 (length input-list))
        (error (++ "expected 3 arguments but got: " (show (length input-list))))
        (let
          ([num (eval (read-str (car input-list)))]
           [trunk (car (cdr input-list))]
           [leaf (car (cdr (cdr input-list)))])
          (if (and (integer? num) (= 1 (mod num 2)) (= 1 (length trunk)) (= 1 (length leaf)))
              (list num trunk leaf)
              (error "bad arguments."))))))

;; calculates a tree
(define calculate-tree (size trunk leaf)
  (lines->str
    (++
      (calculate-tree-helper 1 size leaf) ;; leafs
      (replicate (if (< size 7) (/ size 3) (/ size 6)) ;; trunk
                 (calculate-line (calculate-trunk-size size trunk) size trunk)))))

;; calculate how wide the trunk should be
(define calculate-trunk-size (size trunk)
  (let ([trunk-size (/ size 3)])
    (if (= 0 (mod trunk-size 2))
        (+ trunk-size 1)
        trunk-size)))

;; calculates the leafs of the tree
(define calculate-tree-helper (times size leaf)
  (if (> times size)
      (list)
      (cons (calculate-line times size leaf) (calculate-tree-helper (+ times 2) size leaf))))

;; calculates a line in a tree
(define calculate-line (times size character)
  (apply
    ++
    (++ (replicate (/ (- size times) 2) " ")
        (replicate times character)
        (replicate (/ (- size times) 2) " "))))

